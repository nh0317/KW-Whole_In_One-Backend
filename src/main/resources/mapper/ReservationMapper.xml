<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.naturemobility.seoul.mapper.ReservationMapper">

    <select id="findAllByUserIdx" parameterType="ReservationInfo" resultType="ReservationInfo">
        select r.reservationIdx,
               r.storeIdx,
               s.storeName,
               r.reservationTime,
               r.useTime,
               r.selectedHall,
               r.personCount,
               r.alreadyUsed,
               p.refundStatus,
               (SELECT re.reviewScore
                       FROM Reviews re
                       WHERE re.reservationIdx = r.reservationIdx) AS score
        FROM Reservations r left join Payment p  on strcmp(r.merchantUid, p.merchantUid) = 0
            left join Stores s on r.storeIdx=s.storeIdx
        WHERE r.userIdx=#{userIdx}
        Order By alreadyUsed, refundStatus, reservationTime DESC
            LIMIT #{pageInfo.firstIndex}, #{recordsPerPage}
    </select>

    <select id="findByRezIdx" resultType="ReservationInfo">
        select r.reservationIdx,
               s.storeName,
               r.reservationTIme,
               r.useTime,
               r.selectedHall,
               r.personCount,
               r.alreadyUsed,
               r.reservePrice,
               r.discountPrice,
               r.payPrice,
               r.createdAt,
               p.payMethod,
               p.refundStatus,
               (case
                  when p.amount = 0 then null
                    else p.createdAt
               end) as paymentTime
        FROM Reservations r left join Payment p on strcmp(r.merchantUid, p.merchantUid) = 0
            left join Stores s on r.storeIdx=s.storeIdx
        WHERE r.reservationIdx=#{reservationIdx}
    </select>

    <select id="cntTotal" resultType="Integer">
        select count(*)
        FROM Reservations
        WHERE userIdx=#{userIdx}
    </select>

    <select id="findStoreIdxByRezIdx" resultType="Long">
        SELECT storeIdx
        FROM Reservations
        WHERE reservationIdx=#{reservationIdx}
    </select>

    <delete id="delete" parameterType="ReservationInfo">
        DELETE FROM Reservations
        WHERE reservationIdx=#{reservationIdx}
    </delete>

    <insert id="postReservation" parameterType="PostRezInfo">
        INSERT INTO Reservations(storeIdx, userIdx, reservationTime, useTime, numberOfGame, selectedHall, request,
                                 personCount, reservePrice, discountPrice, payPrice, endTime, roomIdx, merchantUid,
                                 modiBy, modiRole)
        VALUES (#{storeIdx}, #{userIdx}, #{reservationTime}, #{useTime}, #{numberOfGame}, #{selectedHall}, #{request},
                #{personCount}, #{price}, #{discountPrice}, #{payPrice}, #{endTime}, #{roomIdx}, #{merchantUid},
                #{modiBy},#{modiRole});
    </insert>

    <select id="getReservationTime" resultType="GetRezTime">
        SELECT DATE_FORMAT(reservationTime, '%H:%i') AS reservedTime,
               DATE_FORMAT(endTime, '%H:%i') AS endTime
        FROM Reservations
        WHERE storeIdx = #{storeIdx}
          AND DATE_FORMAT(reservationTime, '%Y-%m-%d') = #{reservationDay}
          AND roomIdx = #{roomIdx}
          AND alreadyUsed = 0;
    </select>

    <select id="checkDuplication1" resultType="Integer">
        SELECT COUNT(1)
        FROM Reservations
        WHERE reservationTime >= #{startTime}
          AND reservationTime &lt;= #{endTime}
          AND storeIdx = #{storeIdx}
          AND roomIdx = #{roomIdx}
          AND alreadyUsed = 0;
    </select>

    <select id="checkDuplication2" resultType="Integer">
        SELECT COUNT(1)
        FROM Reservations
        WHERE endTime > #{startTime}
          AND endTime &lt;= #{endTime}
          AND storeIdx = #{storeIdx}
          AND roomIdx = #{roomIdx}
          AND alreadyUsed = 0;
    </select>

    <update id="updateAlreadyUsed">
        UPDATE Reservations
        SET alreadyUsed=#{alreadyUsed}
        WHERE reservationIdx=#{reservationIdx}
    </update>

    <select id="getCanRezTime" resultType="GetCanRezTimeRes">
        with recursive hours as(
            select str_to_date(#{firstTime},'%Y-%m-%d %H:%i:%s') as hour
                union all
                    select date_add(hour,INTERVAL 30 MINUTE) as hour
                from hours
            where hour &lt; #{endTime}
        )
        select time_format(h.hour,"%H:%i") as time
        from hours h left join
            (StorePrice sp left join PriceScheme ps on ps.priceSchemeIdx = sp.priceSchemeIdx )
            on h.hour
                between str_to_date(concat(#{rezDate},' ',sp.startTime), '%Y-%m-%d %H:%i')
                    and (case
                        when time_format(sp.endTime, '%H:%i') &lt; time_format(sp.startTime, '%H:%i')
                            then date_add(str_to_date(concat( #{rezDate},' ',sp.endTime), '%Y-%m-%d %H:%i'), INTERVAL 1 DAY)
                        else str_to_date(concat( #{rezDate},' ',sp.endTime), '%Y-%m-%d %H:%i')
                    end)
            where h.hour not in (
                select h.hour
                from hours h join Reservations r
                on h.hour between r.reservationTime and r.endTime
                left join Stores s on r.storeIdx = s.storeIdx
                where (alreadyUsed = 0) and (s.storeIdx = #{storeIdx})
                        and r.roomIdx = #{roomIdx} and r.selectedHall = #{hall}
                group by h.hour
            )and ps.storeIdx = #{storeIdx} and sp.deletedAt is null
            group by h.hour
            order by h.hour;
    </select>
</mapper>