<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.naturemobility.seoul.mapper.StoresMapper">

    <select id="findBySearch" resultType="SearchStoreRes">
        -- -- Latitude 위도, Longitude 경도,위도 (37.5533535 127.0235435)
        SELECT storeIdx,
               storeImage,
               storeName,
               brandName AS storeBrand,
               storeLocation,
               round((6371 *
                      acos(cos(radians(#{userLatitude})) * cos(radians(storeLatitude)) * cos(radians(storeLongitude)
                          - radians(#{userLongitude})) + sin(radians(#{userLatitude})) * sin(radians(storeLatitude)))),
                     1)  as distanceFromUser
        FROM Stores
                 INNER JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        WHERE storeName LIKE CONCAT('%', #{storeName}, '%');
    </select>

    <select id="retrieveStoreInfoByStoreIdx" resultType="GetStoreRes">
        SELECT storeImage,
               brandName                                                           AS storeBrand,
               storeName,
               storeInfo,
               (SELECT IFNULL(ROUND(SUM(reviewScore) / COUNT(reviewIdx), 1), 0)
                FROM Reviews
                WHERE Reviews.storeIdx = Stores.storeIdx)                          AS reviewStar,
               storePhoneNumber,
               (SELECT Count(reviewIdx) FROM Reviews WHERE storeIdx = #{storeIdx}) AS reviewCount,
               storeLocation,
               storeTime,
               (select count(*) from Rooms where partnerIdx = #{partnerIdx})       as batCount,
               lefthandStatus,
               parkingStatus,
               groupseatStatus,
               floorscreenStatus,
               lessonStatus
        FROM Stores
                 LEFT JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        WHERE storeIdx = #{storeIdx}
    </select>

    <select id="checkStoreIdx" resultType="Integer">
        SELECT count(1) AS checkStoreIdx
        FROM Stores
        WHERE storeIdx = #{storeIdx};
    </select>

    <select id="setOrderRule">
        SET
        @orderRule :=
        #{orderRule};
    </select>

    <select id="retrieveStoreInfoByMap" resultType="GetStoreResByMap">
        SELECT storeIdx,
               storeImage,
               brandName                                  AS storeBrand,
               storeName,
               storeLatitude,
               storeLongitude,
               round((6371 *
                      acos(cos(radians(#{userLatitude})) * cos(radians(storeLatitude)) * cos(radians(storeLongitude)
                          - radians(#{userLongitude})) + sin(radians(#{userLatitude})) * sin(radians(storeLatitude)))),
                     1)                                   as distanceFromUser,
               (SELECT IFNULL(ROUND(SUM(reviewScore) / COUNT(reviewIdx), 1), 0)
                FROM Reviews
                WHERE Reviews.storeIdx = Stores.storeIdx) AS reviewStar

        FROM Stores
                 INNER JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        ORDER BY CASE
                     WHEN @orderRule = 1 THEN distanceFromUser
                     END ASC,
                 CASE
                     WHEN @orderRule = 2 THEN reviewStar
                     END DESC;

    </select>

    <select id="retrieveStoreInfoByMapWithFilter" resultType="GetStoreResByMap">
        SELECT storeImage,
               brandName                                  AS storeBrand,
               storeName,
               storeLatitude,
               storeLongitude,
               round((6371 *
                      acos(cos(radians(#{userLatitude})) * cos(radians(storeLatitude)) * cos(radians(storeLongitude)
                          - radians(#{userLongitude})) + sin(radians(#{userLatitude})) * sin(radians(storeLatitude)))),
                     1)                                   as distanceFromUser,
               (SELECT IFNULL(ROUND(SUM(reviewScore) / COUNT(reviewIdx), 1), 0)
                FROM Reviews
                WHERE Reviews.storeIdx = Stores.storeIdx) AS reviewStar

        FROM Stores
                 INNER JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        WHERE storeBrand IN (#{brand})
          AND lefthandStatus = #{lefthandStatus}
          AND parkingStatus = #{parkingStatus}
          AND groupseatStatus = #{groupseatStatus}
          AND floorscreenStatus = #{floorscreenStatus}
          AND storageStatus = #{storageStatus}
          AND lessonStatus = #{lessonStatus}
        HAVING distanceFromUser &lt; #{distance}
        ORDER BY CASE
                     WHEN @orderRule = 1 THEN distanceFromUser
                     END ASC,
                 CASE
                     WHEN @orderRule = 2 THEN reviewStar
                     END DESC;

    </select>

    <select id="retrieveStoreInfoByMapWithFilter2" resultType="GetStoreResByMap">
        -- 브랜드, 시설, 거리 전체 조회
        SELECT storeIdx,storeImage,
        brandName AS storeBrand,
        storeName,
        storeLatitude,
        storeLongitude,
        round((6371 *
        acos(cos(radians(#{userLatitude})) * cos(radians(storeLatitude)) * cos(radians(storeLongitude)
        - radians(#{userLongitude})) + sin(radians(#{userLatitude})) * sin(radians(storeLatitude)))),
        1) as distanceFromUser,
        (SELECT IFNULL(ROUND(SUM(reviewScore) / COUNT(reviewIdx), 1), 0)
        FROM Reviews
        WHERE Reviews.storeIdx = Stores.storeIdx) AS reviewStar

        FROM Stores
        INNER JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        WHERE storeBrand IN (
        <foreach collection="brand" item="brand" index="index" separator=",">
            ${brand}
        </foreach>)
        AND lefthandStatus = #{lefthandStatus}
        AND parkingStatus = #{parkingStatus}
        AND groupseatStatus = #{groupseatStatus}
        AND floorscreenStatus = #{floorscreenStatus}
        AND storageStatus = #{storageStatus}
        AND lessonStatus = #{lessonStatus}
        HAVING distanceFromUser &lt;= #{distance}
        ORDER BY CASE
        WHEN @orderRule = 1 THEN distanceFromUser
        END ASC,
        CASE
        WHEN @orderRule = 2 THEN reviewStar
        END DESC;

    </select>

    <select id="retrieveStoreInfoByMapWithBrandFilter" resultType="GetStoreResByMap">
        -- 브랜드만 조회
        SELECT storeIdx,storeImage,
        brandName AS storeBrand,
        storeName,
        storeLatitude,
        storeLongitude,
        round((6371 *
        acos(cos(radians(#{userLatitude})) * cos(radians(storeLatitude)) * cos(radians(storeLongitude)
        - radians(#{userLongitude})) + sin(radians(#{userLatitude})) * sin(radians(storeLatitude)))),
        1) as distanceFromUser,
        (SELECT IFNULL(ROUND(SUM(reviewScore) / COUNT(reviewIdx), 1), 0)
        FROM Reviews
        WHERE Reviews.storeIdx = Stores.storeIdx) AS reviewStar

        FROM Stores
        INNER JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        WHERE storeBrand IN (
        <foreach collection="brand" item="brand" index="index" separator=",">
            ${brand}
        </foreach>)
        ORDER BY CASE
        WHEN @orderRule = 1 THEN distanceFromUser
        END ASC,
        CASE
        WHEN @orderRule = 2 THEN reviewStar
        END DESC;
    </select>

    <select id="retrieveStoreInfoByMapWithFacilityFilter" resultType="GetStoreResByMap">
        -- 시설만 조회
        SELECT storeIdx,
               storeImage,
               brandName                                  AS storeBrand,
               storeName,
               storeLatitude,
               storeLongitude,
               round((6371 *
                      acos(cos(radians(#{userLatitude})) * cos(radians(storeLatitude)) * cos(radians(storeLongitude)
                          - radians(#{userLongitude})) + sin(radians(#{userLatitude})) * sin(radians(storeLatitude)))),
                     1)                                   as distanceFromUser,
               (SELECT IFNULL(ROUND(SUM(reviewScore) / COUNT(reviewIdx), 1), 0)
                FROM Reviews
                WHERE Reviews.storeIdx = Stores.storeIdx) AS reviewStar

        FROM Stores
                 INNER JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        WHERE lefthandStatus = #{lefthandStatus}
          AND parkingStatus = #{parkingStatus}
          AND groupseatStatus = #{groupseatStatus}
          AND floorscreenStatus = #{floorscreenStatus}
          AND storageStatus = #{storageStatus}
          AND lessonStatus = #{lessonStatus}
        ORDER BY CASE
                     WHEN @orderRule = 1 THEN distanceFromUser
                     END ASC,
                 CASE
                     WHEN @orderRule = 2 THEN reviewStar
                     END DESC;

    </select>

    <select id="retrieveStoreInfoByMapWithDistanceFilter" resultType="GetStoreResByMap">
        -- 거리만 조회
        SELECT storeIdx,
               storeImage,
               brandName                                  AS storeBrand,
               storeName,
               storeLatitude,
               storeLongitude,
               round((6371 *
                      acos(cos(radians(#{userLatitude})) * cos(radians(storeLatitude)) * cos(radians(storeLongitude)
                          - radians(#{userLongitude})) + sin(radians(#{userLatitude})) * sin(radians(storeLatitude)))),
                     1)                                   as distanceFromUser,
               (SELECT IFNULL(ROUND(SUM(reviewScore) / COUNT(reviewIdx), 1), 0)
                FROM Reviews
                WHERE Reviews.storeIdx = Stores.storeIdx) AS reviewStar

        FROM Stores
                 INNER JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        HAVING distanceFromUser &lt;= #{distance}
        ORDER BY CASE
                     WHEN @orderRule = 1 THEN distanceFromUser
                     END ASC,
                 CASE
                     WHEN @orderRule = 2 THEN reviewStar
                     END DESC;

    </select>

    <select id="retrieveStoreInfoByMapWithBrandFacilityFilter" resultType="GetStoreResByMap">
        -- 브랜드 + 시설 조회
        SELECT storeIdx,storeImage,
        brandName AS storeBrand,
        storeName,
        storeLatitude,
        storeLongitude,
        round((6371 *
        acos(cos(radians(#{userLatitude})) * cos(radians(storeLatitude)) * cos(radians(storeLongitude)
        - radians(#{userLongitude})) + sin(radians(#{userLatitude})) * sin(radians(storeLatitude)))),
        1) as distanceFromUser,
        (SELECT IFNULL(ROUND(SUM(reviewScore) / COUNT(reviewIdx), 1), 0)
        FROM Reviews
        WHERE Reviews.storeIdx = Stores.storeIdx) AS reviewStar

        FROM Stores
        INNER JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        WHERE storeBrand IN (
        <foreach collection="brand" item="brand" index="index" separator=",">
            ${brand}
        </foreach>)
        AND lefthandStatus = #{lefthandStatus}
        AND parkingStatus = #{parkingStatus}
        AND groupseatStatus = #{groupseatStatus}
        AND floorscreenStatus = #{floorscreenStatus}
        AND storageStatus = #{storageStatus}
        AND lessonStatus = #{lessonStatus}
        ORDER BY CASE
        WHEN @orderRule = 1 THEN distanceFromUser
        END ASC,
        CASE
        WHEN @orderRule = 2 THEN reviewStar
        END DESC;
    </select>

    <select id="retrieveStoreInfoByMapWithBrandDistanceFilter" resultType="GetStoreResByMap">
        -- 브랜드 + 거리 조회
        SELECT storeIdx,storeImage,
        brandName AS storeBrand,
        storeName,
        storeLatitude,
        storeLongitude,
        round((6371 *
        acos(cos(radians(#{userLatitude})) * cos(radians(storeLatitude)) * cos(radians(storeLongitude)
        - radians(#{userLongitude})) + sin(radians(#{userLatitude})) * sin(radians(storeLatitude)))),
        1) as distanceFromUser,
        (SELECT IFNULL(ROUND(SUM(reviewScore) / COUNT(reviewIdx), 1), 0)
        FROM Reviews
        WHERE Reviews.storeIdx = Stores.storeIdx) AS reviewStar

        FROM Stores
        INNER JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        WHERE storeBrand IN (
        <foreach collection="brand" item="brand" index="index" separator=",">
            ${brand}
        </foreach>)
        HAVING distanceFromUser &lt;= #{distance}
        ORDER BY CASE
        WHEN @orderRule = 1 THEN distanceFromUser
        END ASC,
        CASE
        WHEN @orderRule = 2 THEN reviewStar
        END DESC;

    </select>

    <select id="retrieveStoreInfoByMapWithFacilityDistanceFilter" resultType="GetStoreResByMap">
        -- 시설 + 거리 조회
        SELECT storeIdx,
               storeImage,
               brandName                                  AS storeBrand,
               storeName,
               storeLatitude,
               storeLongitude,
               round((6371 *
                      acos(cos(radians(#{userLatitude})) * cos(radians(storeLatitude)) * cos(radians(storeLongitude)
                          - radians(#{userLongitude})) + sin(radians(#{userLatitude})) * sin(radians(storeLatitude)))),
                     1)                                   as distanceFromUser,
               (SELECT IFNULL(ROUND(SUM(reviewScore) / COUNT(reviewIdx), 1), 0)
                FROM Reviews
                WHERE Reviews.storeIdx = Stores.storeIdx) AS reviewStar

        FROM Stores
                 INNER JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        WHERE lefthandStatus = #{lefthandStatus}
          AND parkingStatus = #{parkingStatus}
          AND groupseatStatus = #{groupseatStatus}
          AND floorscreenStatus = #{floorscreenStatus}
          AND storageStatus = #{storageStatus}
          AND lessonStatus = #{lessonStatus}
        HAVING distanceFromUser &lt;= #{distance}
        ORDER BY CASE
                     WHEN @orderRule = 1 THEN distanceFromUser
                     END ASC,
                 CASE
                     WHEN @orderRule = 2 THEN reviewStar
                     END DESC;

    </select>

    <select id="retrieveBrandInfo" resultType="GetBrandRes">
        SELECT brandIdx, brandName
        FROM StoreBrand;
    </select>

    <select id="findStoreName" resultType="String">
        SELECT storeName
        FROM Stores
        WHERE storeIdx = #{storeIdx}
    </select>

    <select id="retrievePartnerIdx" resultType="Long">
        SELECT partnerIdx
        FROM Partner
        WHERE storeIdx = #{storeIdx};
    </select>

    <select id="retrieveRoomIdx" resultType="GetRoomIdxRes">
        SELECT DISTINCT roomType
        FROM Rooms
        WHERE partnerIdx = #{partnerIdx};
    </select>

    <select id="retrieveCouponInfo" resultType="CouponInfo">
        SELECT couponIdx, couponName, couponPercentage, couponDeadline
        FROM Coupons
        WHERE couponDeadline >= NOW()
          AND storeIdx = #{storeIdx}
    </select>

    <select id="retrieveReservedRoomIdx" resultType="Long">
        SELECT Rooms.roomIdx
        FROM Rooms
                 INNER JOIN Partner on Rooms.partnerIdx = Partner.partnerIdx
                 INNER JOIN Reservations on Reservations.roomIdx = Rooms.roomIdx
        WHERE Partner.partnerIdx = #{partnerIdx}
          AND reservationTime >= #{startTime}
          AND endTime &lt;= #{endTime};
    </select>

    <select id="retrieveReservedRoomIdx2" resultType="Long">
        SELECT Rooms.roomIdx
        FROM Rooms
                 INNER JOIN Partner on Rooms.partnerIdx = Partner.partnerIdx
                 INNER JOIN Reservations on Reservations.roomIdx = Rooms.roomIdx
        WHERE Partner.partnerIdx = #{partnerIdx}
          AND reservationTime >= #{endTime}
          AND endTime &lt;= #{endTime};
    </select>

    <select id="retrieveRoomIdxOnly" resultType="Long">
        SELECT roomIdx
        FROM Rooms
        WHERE partnerIdx = #{partnerIdx};
    </select>

    <select id="retrieveStoreImages" resultType="GetStoreImagesRes">
        SELECT imgFileIdx, storeImage
        From StoreImageFile
        WHERE storeIdx = #{storeIdx}
    </select>

    <select id="retrieveStoreInfoByMapWithFilterApplyAllBrand" resultType="GetStoreResByMap">
        SELECT storeImage,
               brandName                                  AS storeBrand,
               storeName,
               storeLatitude,
               storeLongitude,
               round((6371 *
                      acos(cos(radians(#{userLatitude})) * cos(radians(storeLatitude)) * cos(radians(storeLongitude)
                          - radians(#{userLongitude})) + sin(radians(#{userLatitude})) * sin(radians(storeLatitude)))),
                     1)                                   as distanceFromUser,
               (SELECT IFNULL(ROUND(SUM(reviewScore) / COUNT(reviewIdx), 1), 0)
                FROM Reviews
                WHERE Reviews.storeIdx = Stores.storeIdx) AS reviewStar

        FROM Stores
                 INNER JOIN StoreBrand ON StoreBrand.brandIdx = storeBrand
        WHERE lefthandStatus = #{lefthandStatus}
          AND parkingStatus = #{parkingStatus}
          AND groupseatStatus = #{groupseatStatus}
          AND floorscreenStatus = #{floorscreenStatus}
          AND storageStatus = #{storageStatus}
          AND lessonStatus = #{lessonStatus}
        HAVING distanceFromUser &lt; #{distance}
        ORDER BY CASE
                     WHEN @orderRule = 1 THEN distanceFromUser
                     END ASC,
                 CASE
                     WHEN @orderRule = 2 THEN reviewStar
                     END DESC;

    </select>

    <select id="getRoomIdx" resultType="Long">
        SELECT roomIdx
        FROM Rooms
        WHERE roomType = #{roomType}
          AND partnerIdx = #{partnerIdx}
    </select>

    <select id="retrieveRoomName" resultType="GetRoomNameRes">
        SELECT roomIdx, roomType, roomName
        FROM Rooms
        WHERE partnerIdx = #{partnerIdx}
    </select>

    <select id="retrieveRoomNameByRoomType" resultType="GetRoomNameRes">
        SELECT roomIdx, roomType, roomName
        FROM Rooms
        WHERE partnerIdx = #{partnerIdx}
          and roomType = #{roomType}
    </select>

</mapper>